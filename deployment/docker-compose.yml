version: '3.9'

volumes:
  conf-data:
  static-data:
  media-data:
  database:
  nginx-cache:
  backups-data:
  data-volume:
  minio-data:

x-common-variables: &common-variables
  # editable in .env
  DATABASE_NAME: ${DATABASE_NAME:-django}
  DATABASE_USERNAME: ${DATABASE_USERNAME:-docker}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD:-docker}
  DATABASE_HOST: ${DATABASE_HOST:-db}
  REDIS_HOST: ${REDIS_HOST:-redis}
  REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
  RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
  DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-core.settings.prod}
  INITIAL_FIXTURES: ${INITIAL_FIXTURES:-False}
  CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-[]}
  SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
  SENTRY_DSN: ${SENTRY_DSN:-}
  # Email where alters should be sent. This will be used by let's encrypt and as the django admin email.
  ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
  ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
  ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
  # worker variables
  CPLUS_QUEUE_CONCURRENCY: ${CPLUS_QUEUE_CONCURRENCY:-1}
  # s3 variable
  S3_AWS_ACCESS_KEY_ID: ${S3_AWS_ACCESS_KEY_ID:-miniocplus}
  S3_AWS_SECRET_ACCESS_KEY: ${S3_AWS_SECRET_ACCESS_KEY:-miniocplus}
  AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
  AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-cpluss3}
  # minio variable
  MINIO_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY_ID:-miniocplus}
  MINIO_SECRET_ACCESS_KEY: ${MINIO_SECRET_ACCESS_KEY:-miniocplus}
  MINIO_ENDPOINT: ${MINIO_ENDPOINT}
  MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-cplus}
  MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
  DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
  RESEND_API_KEY: ${RESEND_API_KEY}


x-common-django:
  &default-common-django
  image: kartoza/${COMPOSE_PROJECT_NAME:-django_project}:${DJANGO_TAG:-1.0.0}
  environment:
    <<: *common-variables
  restart: on-failure

services:
  redis:
    image: bitnami/redis:7.0.2
    container_name: "cplus-api-redis"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}

  db:
    image: kartoza/postgis:14-3.3
    container_name: "cplus-api-db"
    volumes:
      - data-volume:/opt/postgres/data
    environment:
      - DATADIR=/opt/postgres/data
      - ALLOW_IP_RANGE=0.0.0.0/0
      - POSTGRES_DBNAME=${DATABASE_NAME:-django}
      - POSTGRES_USER=${DATABASE_USERNAME:-docker}
      - POSTGRES_PASS=${DATABASE_PASSWORD:-docker}

  dbbackups:
    image: kartoza/pg-backup:14-3.3
    container_name: "cplus-api-dbbackups"
    environment:
      # take care to let the project name below match that
      # declared in the top of the makefile
      - DUMPPREFIX=PG_Cplus_API
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - POSTGRES_USER=${DATABASE_USERNAME:-docker}
      - POSTGRES_PASS=${DATABASE_PASSWORD:-docker}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=db
      - POSTGRES_DBNAME=${DATABASE_NAME:-django}
      - DBLIST=django
    volumes:
      - backups-data:/backups
    restart: on-failure:5

  django:
    <<: *default-common-django
    container_name: "cplus-api-django"
    command: 'uwsgi --ini /uwsgi.conf'
    volumes:
      - static-data:/home/web/static
    links:
      - db
      - minio
      - redis

  celery_beat:
    <<: *default-common-django
    container_name: "cplus-api-celery-beat"
    entrypoint: []
    command: 'celery -A core beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler'
    links:
      - db
      - redis

  worker:
    <<: *default-common-django
    entrypoint: []
    command: '/bin/bash -c /home/web/django_project/worker_entrypoint.sh'
    environment:
      <<: *common-variables
      CPLUS_WORKER: 1
    volumes:
      - media-data:/home/web/media
    links:
      - db
      - minio
      - redis

  dev:
    image: kartoza/${COMPOSE_PROJECT_NAME:-django_project}_dev
    <<: *default-common-django
    container_name: "cplus-api-dev-django"
    entrypoint: []
    volumes:
      - static-data:/home/web/static
      - media-data:/home/web/media
    links:
      - db
      - redis

  nginx:
    image: nginx
    container_name: "cplus-api-nginx"
    hostname: nginx
    volumes:
      - conf-data:/etc/nginx/conf.d:ro
      - nginx-cache:/home/web/nginx_cache
      - static-data:/home/web/static
    links:
      - django
      - minio

  minio:
    image: quay.io/minio/minio:RELEASE.2024-03-30T09-41-56Z.fips
    command: minio server /data --console-address ":9001"
    ports:
      - "9010:9000"
      - "9011:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY_ID:-miniocplus}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_ACCESS_KEY:-miniocplus}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    volumes:
      - minio-data:/data
    restart: always

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MINIO_USER: ${MINIO_ACCESS_KEY_ID:-miniocplus}
      MINIO_PASSWORD: ${MINIO_SECRET_ACCESS_KEY:-miniocplus}
      MINIO_BUCKET: ${MINIO_BUCKET_NAME:-cplus}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 $${MINIO_USER} $${MINIO_PASSWORD};
      /usr/bin/mc mb --ignore-existing myminio/$${MINIO_BUCKET};
      exit 0;
      "
